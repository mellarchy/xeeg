"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},E={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,m=c["".concat(s,".").concat(u)]||c[u]||E[u]||o;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>E,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:1},i="Quick Start Guide",l={unversionedId:"intro",id:"intro",title:"Quick Start Guide",description:"Get started with Xeeg in less than 5 minutes.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/xeeg/docs/intro",draft:!1,editUrl:"https://github.com/mellarchy/xeeg/website/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Tutorial - Basics",permalink:"/xeeg/docs/category/tutorial---basics"}},s={},p=[{value:"Getting Started",id:"getting-started",level:2},{value:"What you&#39;ll need",id:"what-youll-need",level:3},{value:"Stub Files",id:"stub-files",level:4},{value:"Defining a template",id:"defining-a-template",level:2},{value:"Generating a file",id:"generating-a-file",level:2}],d={toc:p};function E(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"quick-start-guide"},"Quick Start Guide"),(0,r.kt)("p",null,"Get started with ",(0,r.kt)("strong",{parentName:"p"},"Xeeg in less than 5 minutes"),"."),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("p",null,"Get started by ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"/docs/tutorial-basics/installation-guide"},"installing the binary")),"."),(0,r.kt)("h3",{id:"what-youll-need"},"What you'll need"),(0,r.kt)("h4",{id:"stub-files"},"Stub Files"),(0,r.kt)("p",null,"Stub files (as used in programming) are placeholders for some functionality which is yet to be defined."),(0,r.kt)("p",null,"To generate a file from a template, you'll need to first define the template."),(0,r.kt)("p",null,"The stub files are what Xeeg recognises as templates for the files to be generated."),(0,r.kt)("h2",{id:"defining-a-template"},"Defining a template"),(0,r.kt)("p",null,"There's no strict way of generating templates with Xeeg. You can simply define a file which has the file extension of ",(0,r.kt)("inlineCode",{parentName:"p"},".stub")," (or whatever you choose it to be ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorial-basics/configuration"},"refer config docs"),")"),(0,r.kt)("p",null,"In this guide we'll create an actions (a concept from redux) generator file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="./stubs/action.stub"',title:'"./stubs/action.stub"'},"\n// Generated with Xeeg ;)\n\nimport { ActionRequestOptions } from '@lib/types';\n\nconst [NEEDLE_CAMEL]Actions = {\n    fetch[NEEDLE_PASCAL_PLURAL]: (data?, options?: ActionRequestOptions) => ({\n        type: 'FETCH_[NEEDLE_UPPER_SNAKE_PLURAL]',\n        data,\n        options,\n    }),\n    fetched[NEEDLE_PASCAL_PLURAL]: (data?) => ({\n        type: 'FETCHED_[NEEDLE_UPPER_SNAKE_PLURAL]',\n        ...data,\n    }),\n    failedFetch[NEEDLE_PASCAL_PLURAL]: (error?) => ({\n        type: 'FAILED_FETCH_[NEEDLE_UPPER_SNAKE_PLURAL]',\n        ...error,\n    }),\n    fetch[NEEDLE_PASCAL]: (data?, options?: ActionRequestOptions) => ({\n        type: 'FETCH_[NEEDLE_UPPER_SNAKE]',\n        data,\n        options,\n    }),\n    fetched[NEEDLE_PASCAL]: (data?) => ({\n        type: 'FETCHED_[NEEDLE_UPPER_SNAKE]',\n        ...data,\n    }),\n    failedFetch[NEEDLE_PASCAL]: (error?) => ({\n        type: 'FAILED_FETCH_[NEEDLE_UPPER_SNAKE]',\n        ...error,\n    }),\n    create[NEEDLE_PASCAL]: (payload?) => ({\n        type: 'CREATE_[NEEDLE_UPPER_SNAKE]',\n        payload: { ...payload, type: '[NEEDLE_SNAKE_PLURAL]' },\n        queueable: true,\n    }),\n    created[NEEDLE_PASCAL]: (data?) => ({\n        type: 'CREATED_[NEEDLE_UPPER_SNAKE]',\n        ...data,\n    }),\n    failedCreate[NEEDLE_PASCAL]: (error?) => ({\n        type: 'FAILED_CREATE_[NEEDLE_UPPER_SNAKE]',\n        ...error,\n    }),\n};\n\nexport const {\n    fetch[NEEDLE_PASCAL_PLURAL],\n    fetched[NEEDLE_PASCAL_PLURAL],\n    failedFetch[NEEDLE_PASCAL_PLURAL],\n    fetch[NEEDLE_PASCAL],\n    fetched[NEEDLE_PASCAL],\n    failedFetch[NEEDLE_PASCAL],\n    create[NEEDLE_PASCAL],\n    created[NEEDLE_PASCAL],\n    failedCreate[NEEDLE_PASCAL],\n} = [NEEDLE_CAMEL]Actions;\n")),(0,r.kt)("p",null,"Notice the use of placeholder strings such as ",(0,r.kt)("inlineCode",{parentName:"p"},"[NEEDLE_PASCAL_PLURAL]"),". These strings are known as needles. Needles get replaced when you generate the end file."),(0,r.kt)("h2",{id:"generating-a-file"},"Generating a file"),(0,r.kt)("p",null,"Finally, we can generate a file from the action template file. To do so, we run the command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"xeeg make:action ExampleModel example-model-action.ts\n")),(0,r.kt)("p",null,"Breaking down the command:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"make:action:"))," This command is in two parts separated by a colon (:). The first part, which is ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," tells xeeg that you're trying to generate a file. The second part, ",(0,r.kt)("inlineCode",{parentName:"p"},"action")," is dynamic and is expected to be the name of your stub file (without the extension). Hence Xeeg will attempt to find a stub file called ",(0,r.kt)("inlineCode",{parentName:"p"},"action.stub")," in the stubs directory.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"ExampleModel:"))," This part is the replacement for all the needle strings in your stub file. Depending on the needle string, the replacement will be formatted accordingly")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"example-model-action.ts:"))," This is the name of the output file we're choosing to save the output into. This file will be placed in the path of the specified output folder"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"In summary:"))," the command will search for a file in the path ",(0,r.kt)("inlineCode",{parentName:"p"},"./stubs/action.stub"),", replace it's needle strings with the suitably formatted 'ExampleModel' string and finally place the output in the path: ",(0,r.kt)("inlineCode",{parentName:"p"},"./generated/example-model-action.ts"),"."),(0,r.kt)("p",null,"The contents of the output will look like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="./generated/example-model-action.ts"',title:'"./generated/example-model-action.ts"'},"\n// Generated with Xeeg ;)\n\nimport { ActionRequestOptions } from '@lib/types';\n\nconst exampleModelActions = {\n    fetchExampleModels: (data?, options?: ActionRequestOptions) => ({\n        type: 'FETCH_EXAMPLE_MODELS`,\n        data,'      options,\n    }),\n    fetchedExampleModels: (data?) => ({\n        type: 'FETCHED_EXAMPLE_MODELS`,\n        ...d'ta,\n    }),\n    failedFetchExampleModels: (error?) => ({\n        type: 'FAILED_FETCH_EXAMPLE_MODELS`,\n        ...e'ror,\n    }),\n    fetchExampleModel: (data?, options?: ActionRequestOptions) => ({\n        type: 'FETCH_EXAMPLE_MODEL`,\n        data,'      options,\n    }),\n    fetchedExampleModel: (data?) => ({\n        type: 'FETCHED_EXAMPLE_MODEL`,\n        ...d'ta,\n    }),\n    failedFetchExampleModel: (error?) => ({\n        type: 'FAILED_FETCH_EXAMPLE_MODEL`,\n        ...e'ror,\n    }),\n    createExampleModel: (payload?) => ({\n        type: 'CREATE_EXAMPLE_MODEL`,\n        payload:'{ ...payload, type: 'example_models' },\n        queueable: true,\n    }),\n    createdExampleModel: (data?) => ({\n        type: 'CREATED_EXAMPLE_MODEL`,\n        ...d'ta,\n    }),\n    failedCreateExampleModel: (error?) => ({\n        type: 'FAILED_CREATE_EXAMPLE_MODEL`,\n        ...e'ror,\n    }),\n};\n\nexport const {\n    fetchExampleModels,\n    fetchedExampleModels,\n    failedFetchExampleModels,\n    fetchExampleModel,\n    fetchedExampleModel,\n    failedFetchExampleModel,\n    createExampleModel,\n    createdExampleModel,\n    failedCreateExampleModel,\n} = exampleModelActions;\n")),(0,r.kt)("p",null,"And that's the most part of how it's done!"))}E.isMDXComponent=!0}}]);